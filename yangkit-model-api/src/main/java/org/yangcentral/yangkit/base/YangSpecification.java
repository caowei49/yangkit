package org.yangcentral.yangkit.base;

import org.yangcentral.yangkit.common.api.QName;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class YangSpecification {
   private String version;
   private Map<QName, YangStatementDef> statementDefs = new HashMap();
   private static final YangSpecification YANG_VERSION_10 = new YangSpecification("1.0");
   private static final YangSpecification YANG_VERSION_11 = new YangSpecification("1.1");

   public static YangSpecification getVersion1Spec() {
      return YANG_VERSION_10;
   }

   public static YangSpecification getVersion11Spec() {
      return YANG_VERSION_11;
   }

   private YangSpecification(String version) {
      this.version = version;
      if (version.equals("1.1")) {
         this.initYang11Statements();
      } else {
         this.initYang10Statements();
      }

   }

   public YangStatementDef getStatementDef(QName keyword) {
      Iterator<Map.Entry<QName, YangStatementDef>> it = this.statementDefs.entrySet().iterator();

      Map.Entry entry;
      do {
         if (!it.hasNext()) {
            return null;
         }

         entry = (Map.Entry)it.next();
      } while(!((QName)entry.getKey()).equals(keyword));

      return (YangStatementDef)entry.getValue();
   }

   public Map<QName, YangStatementDef> getStatementDefs() {
      return this.statementDefs;
   }

   private void initYang11Statements() {
      YangStatementDef module = new YangStatementDef(YangBuiltinKeyword.MODULE.getQName(), YangBuiltinKeyword.MODULE.getArgument(), YangBuiltinKeyword.MODULE.isYinElement());
      module.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.AUGMENT.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.CONTACT.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.DEVIATION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.EXTENSION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.FEATURE.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.IDENTITY.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.IMPORT.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.INCLUDE.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.NAMESPACE.getQName(), new Cardinality(1, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.ORGANIZATION.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.PREFIX.getQName(), new Cardinality(1, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.REVISION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.RPC.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.YANGVERSION.getQName(), new Cardinality(1, 1));
      this.statementDefs.put(YangBuiltinKeyword.MODULE.getQName(), module);
      YangStatementDef importDef = new YangStatementDef(YangBuiltinKeyword.IMPORT.getQName(), YangBuiltinKeyword.IMPORT.getArgument(), YangBuiltinKeyword.IMPORT.isYinElement());
      importDef.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      importDef.addSubStatementInfo(YangBuiltinKeyword.PREFIX.getQName(), new Cardinality(1, 1));
      importDef.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      importDef.addSubStatementInfo(YangBuiltinKeyword.REVISIONDATE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.IMPORT.getQName(), importDef);
      YangStatementDef revisionDate = new YangStatementDef(YangBuiltinKeyword.REVISIONDATE.getQName(), YangBuiltinKeyword.REVISIONDATE.getArgument(), YangBuiltinKeyword.REVISIONDATE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.REVISIONDATE.getQName(), revisionDate);
      YangStatementDef yangVersion = new YangStatementDef(YangBuiltinKeyword.YANGVERSION.getQName(), YangBuiltinKeyword.YANGVERSION.getArgument(), YangBuiltinKeyword.YANGVERSION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.YANGVERSION.getQName(), yangVersion);
      YangStatementDef namespace = new YangStatementDef(YangBuiltinKeyword.NAMESPACE.getQName(), YangBuiltinKeyword.NAMESPACE.getArgument(), YangBuiltinKeyword.NAMESPACE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.NAMESPACE.getQName(), namespace);
      YangStatementDef prefix = new YangStatementDef(YangBuiltinKeyword.PREFIX.getQName(), YangBuiltinKeyword.PREFIX.getArgument(), YangBuiltinKeyword.PREFIX.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.PREFIX.getQName(), prefix);
      YangStatementDef include = new YangStatementDef(YangBuiltinKeyword.INCLUDE.getQName(), YangBuiltinKeyword.INCLUDE.getArgument(), YangBuiltinKeyword.INCLUDE.isYinElement());
      include.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      include.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      include.addSubStatementInfo(YangBuiltinKeyword.REVISIONDATE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.INCLUDE.getQName(), include);
      YangStatementDef organization = new YangStatementDef(YangBuiltinKeyword.ORGANIZATION.getQName(), YangBuiltinKeyword.ORGANIZATION.getArgument(), YangBuiltinKeyword.ORGANIZATION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ORGANIZATION.getQName(), organization);
      YangStatementDef contact = new YangStatementDef(YangBuiltinKeyword.CONTACT.getQName(), YangBuiltinKeyword.CONTACT.getArgument(), YangBuiltinKeyword.CONTACT.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.CONTACT.getQName(), contact);
      YangStatementDef revision = new YangStatementDef(YangBuiltinKeyword.REVISION.getQName(), YangBuiltinKeyword.REVISION.getArgument(), YangBuiltinKeyword.REVISION.isYinElement());
      revision.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      revision.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.REVISION.getQName(), revision);
      YangStatementDef submodule = new YangStatementDef(YangBuiltinKeyword.SUBMODULE.getQName(), YangBuiltinKeyword.SUBMODULE.getArgument(), YangBuiltinKeyword.SUBMODULE.isYinElement());
      submodule.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.AUGMENT.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.BELONGSTO.getQName(), new Cardinality(1, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.CONTACT.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.DEVIATION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.EXTENSION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.FEATURE.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.IDENTITY.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.IMPORT.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.INCLUDE.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.ORGANIZATION.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.REVISION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.RPC.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.YANGVERSION.getQName(), new Cardinality(1, 1));
      this.statementDefs.put(YangBuiltinKeyword.SUBMODULE.getQName(), submodule);
      YangStatementDef belongsTo = new YangStatementDef(YangBuiltinKeyword.BELONGSTO.getQName(), YangBuiltinKeyword.BELONGSTO.getArgument(), YangBuiltinKeyword.BELONGSTO.isYinElement());
      belongsTo.addSubStatementInfo(YangBuiltinKeyword.PREFIX.getQName(), new Cardinality(1, 1));
      this.statementDefs.put(YangBuiltinKeyword.BELONGSTO.getQName(), belongsTo);
      YangStatementDef typedef = new YangStatementDef(YangBuiltinKeyword.TYPEDEF.getQName(), YangBuiltinKeyword.TYPEDEF.getArgument(), YangBuiltinKeyword.TYPEDEF.isYinElement());
      typedef.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(1, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.TYPEDEF.getQName(), typedef);
      YangStatementDef units = new YangStatementDef(YangBuiltinKeyword.UNITS.getQName(), YangBuiltinKeyword.UNITS.getArgument(), YangBuiltinKeyword.UNITS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.UNITS.getQName(), units);
      YangStatementDef defaultDef = new YangStatementDef(YangBuiltinKeyword.DEFAULT.getQName(), YangBuiltinKeyword.DEFAULT.getArgument(), YangBuiltinKeyword.DEFAULT.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.DEFAULT.getQName(), defaultDef);
      YangStatementDef type = new YangStatementDef(YangBuiltinKeyword.TYPE.getQName(), YangBuiltinKeyword.TYPE.getArgument(), YangBuiltinKeyword.TYPE.isYinElement());
      type.addSubStatementInfo(YangBuiltinKeyword.BASE.getQName(), new Cardinality());
      type.addSubStatementInfo(YangBuiltinKeyword.BIT.getQName(), new Cardinality());
      type.addSubStatementInfo(YangBuiltinKeyword.ENUM.getQName(), new Cardinality());
      type.addSubStatementInfo(YangBuiltinKeyword.FRACTIONDIGITS.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.LENGTH.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.PATH.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.PATTERN.getQName(), new Cardinality());
      type.addSubStatementInfo(YangBuiltinKeyword.RANGE.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.REQUIREINSTANCE.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.TYPE.getQName(), type);
      YangStatementDef container = new YangStatementDef(YangBuiltinKeyword.CONTAINER.getQName(), YangBuiltinKeyword.CONTAINER.getArgument(), YangBuiltinKeyword.CONTAINER.isYinElement());
      container.addSubStatementInfo(YangBuiltinKeyword.ACTION.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.PRESENCE.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.CONTAINER.getQName(), container);
      YangStatementDef must = new YangStatementDef(YangBuiltinKeyword.MUST.getQName(), YangBuiltinKeyword.MUST.getArgument(), YangBuiltinKeyword.MUST.isYinElement());
      must.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      must.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      must.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      must.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.MUST.getQName(), must);
      YangStatementDef errorAppTag = new YangStatementDef(YangBuiltinKeyword.ERRORAPPTAG.getQName(), YangBuiltinKeyword.ERRORAPPTAG.getArgument(), YangBuiltinKeyword.ERRORAPPTAG.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ERRORAPPTAG.getQName(), errorAppTag);
      YangStatementDef errorMessage = new YangStatementDef(YangBuiltinKeyword.ERRORMESSAGE.getQName(), YangBuiltinKeyword.ERRORMESSAGE.getArgument(), YangBuiltinKeyword.ERRORMESSAGE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ERRORMESSAGE.getQName(), errorMessage);
      YangStatementDef presence = new YangStatementDef(YangBuiltinKeyword.PRESENCE.getQName(), YangBuiltinKeyword.PRESENCE.getArgument(), YangBuiltinKeyword.PRESENCE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.PRESENCE.getQName(), presence);
      YangStatementDef leaf = new YangStatementDef(YangBuiltinKeyword.LEAF.getQName(), YangBuiltinKeyword.LEAF.getArgument(), YangBuiltinKeyword.LEAF.isYinElement());
      leaf.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      leaf.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      leaf.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(1, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LEAF.getQName(), leaf);
      YangStatementDef mandatory = new YangStatementDef(YangBuiltinKeyword.MANDATORY.getQName(), YangBuiltinKeyword.MANDATORY.getArgument(), YangBuiltinKeyword.MANDATORY.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.MANDATORY.getQName(), mandatory);
      YangStatementDef leafList = new YangStatementDef(YangBuiltinKeyword.LEAFLIST.getQName(), YangBuiltinKeyword.LEAFLIST.getArgument(), YangBuiltinKeyword.LEAFLIST.isYinElement());
      leafList.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality());
      leafList.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      leafList.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      leafList.addSubStatementInfo(YangBuiltinKeyword.ORDEREDBY.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(1, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LEAFLIST.getQName(), leafList);
      YangStatementDef minElements = new YangStatementDef(YangBuiltinKeyword.MINELEMENTS.getQName(), YangBuiltinKeyword.MINELEMENTS.getArgument(), YangBuiltinKeyword.MINELEMENTS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.MINELEMENTS.getQName(), minElements);
      YangStatementDef maxElements = new YangStatementDef(YangBuiltinKeyword.MAXELEMENTS.getQName(), YangBuiltinKeyword.MAXELEMENTS.getArgument(), YangBuiltinKeyword.MAXELEMENTS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.MAXELEMENTS.getQName(), maxElements);
      YangStatementDef orderedBy = new YangStatementDef(YangBuiltinKeyword.ORDEREDBY.getQName(), YangBuiltinKeyword.ORDEREDBY.getArgument(), YangBuiltinKeyword.ORDEREDBY.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ORDEREDBY.getQName(), orderedBy);
      YangStatementDef list = new YangStatementDef(YangBuiltinKeyword.LIST.getQName(), YangBuiltinKeyword.LIST.getArgument(), YangBuiltinKeyword.LIST.isYinElement());
      list.addSubStatementInfo(YangBuiltinKeyword.ACTION.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.KEY.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.ORDEREDBY.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.UNIQUE.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LIST.getQName(), list);
      YangStatementDef key = new YangStatementDef(YangBuiltinKeyword.KEY.getQName(), YangBuiltinKeyword.KEY.getArgument(), YangBuiltinKeyword.KEY.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.KEY.getQName(), key);
      YangStatementDef unique = new YangStatementDef(YangBuiltinKeyword.UNIQUE.getQName(), YangBuiltinKeyword.UNIQUE.getArgument(), YangBuiltinKeyword.UNIQUE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.UNIQUE.getQName(), unique);
      YangStatementDef choice = new YangStatementDef(YangBuiltinKeyword.CHOICE.getQName(), YangBuiltinKeyword.CHOICE.getArgument(), YangBuiltinKeyword.CHOICE.isYinElement());
      choice.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.CASE.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.CHOICE.getQName(), choice);
      YangStatementDef caseDef = new YangStatementDef(YangBuiltinKeyword.CASE.getQName(), YangBuiltinKeyword.CASE.getArgument(), YangBuiltinKeyword.CASE.isYinElement());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      caseDef.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      caseDef.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      caseDef.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.CASE.getQName(), caseDef);
      YangStatementDef anydata = new YangStatementDef(YangBuiltinKeyword.ANYDATA.getQName(), YangBuiltinKeyword.ANYDATA.getArgument(), YangBuiltinKeyword.ANYDATA.isYinElement());
      anydata.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      anydata.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      anydata.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      anydata.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      anydata.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      anydata.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      anydata.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      anydata.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.ANYDATA.getQName(), anydata);
      YangStatementDef anyxml = new YangStatementDef(YangBuiltinKeyword.ANYXML.getQName(), YangBuiltinKeyword.ANYXML.getArgument(), YangBuiltinKeyword.ANYXML.isYinElement());
      anyxml.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      anyxml.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      anyxml.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.ANYXML.getQName(), anyxml);
      YangStatementDef grouping = new YangStatementDef(YangBuiltinKeyword.GROUPING.getQName(), YangBuiltinKeyword.GROUPING.getArgument(), YangBuiltinKeyword.GROUPING.isYinElement());
      grouping.addSubStatementInfo(YangBuiltinKeyword.ACTION.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      grouping.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      grouping.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      grouping.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.GROUPING.getQName(), grouping);
      YangStatementDef uses = new YangStatementDef(YangBuiltinKeyword.USES.getQName(), YangBuiltinKeyword.USES.getArgument(), YangBuiltinKeyword.USES.isYinElement());
      uses.addSubStatementInfo(YangBuiltinKeyword.AUGMENT.getQName(), new Cardinality());
      uses.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      uses.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      uses.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      uses.addSubStatementInfo(YangBuiltinKeyword.REFINE.getQName(), new Cardinality());
      uses.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      uses.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.USES.getQName(), uses);
      YangStatementDef refine = new YangStatementDef(YangBuiltinKeyword.REFINE.getQName(), YangBuiltinKeyword.REFINE.getArgument(), YangBuiltinKeyword.REFINE.isYinElement());
      refine.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality());
      refine.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.PRESENCE.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      refine.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.REFINE.getQName(), refine);
      YangStatementDef rpc = new YangStatementDef(YangBuiltinKeyword.RPC.getQName(), YangBuiltinKeyword.RPC.getArgument(), YangBuiltinKeyword.RPC.isYinElement());
      rpc.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      rpc.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      rpc.addSubStatementInfo(YangBuiltinKeyword.INPUT.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.OUTPUT.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.RPC.getQName(), rpc);
      YangStatementDef input = new YangStatementDef(YangBuiltinKeyword.INPUT.getQName(), YangBuiltinKeyword.INPUT.getArgument(), YangBuiltinKeyword.INPUT.isYinElement());
      input.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.INPUT.getQName(), input);
      YangStatementDef output = new YangStatementDef(YangBuiltinKeyword.OUTPUT.getQName(), YangBuiltinKeyword.OUTPUT.getArgument(), YangBuiltinKeyword.OUTPUT.isYinElement());
      output.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.OUTPUT.getQName(), output);
      YangStatementDef action = new YangStatementDef(YangBuiltinKeyword.ACTION.getQName(), YangBuiltinKeyword.ACTION.getArgument(), YangBuiltinKeyword.ACTION.isYinElement());
      action.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      action.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      action.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      action.addSubStatementInfo(YangBuiltinKeyword.INPUT.getQName(), new Cardinality(0, 1));
      action.addSubStatementInfo(YangBuiltinKeyword.OUTPUT.getQName(), new Cardinality(0, 1));
      action.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      action.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      action.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.ACTION.getQName(), action);
      YangStatementDef notification = new YangStatementDef(YangBuiltinKeyword.NOTIFICATION.getQName(), YangBuiltinKeyword.NOTIFICATION.getArgument(), YangBuiltinKeyword.NOTIFICATION.isYinElement());
      notification.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      notification.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      notification.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      notification.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.NOTIFICATION.getQName(), notification);
      YangStatementDef augment = new YangStatementDef(YangBuiltinKeyword.AUGMENT.getQName(), YangBuiltinKeyword.AUGMENT.getArgument(), YangBuiltinKeyword.AUGMENT.isYinElement());
      augment.addSubStatementInfo(YangBuiltinKeyword.ACTION.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.ANYDATA.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.CASE.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      augment.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      augment.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      augment.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.AUGMENT.getQName(), augment);
      YangStatementDef identity = new YangStatementDef(YangBuiltinKeyword.IDENTITY.getQName(), YangBuiltinKeyword.IDENTITY.getArgument(), YangBuiltinKeyword.IDENTITY.isYinElement());
      identity.addSubStatementInfo(YangBuiltinKeyword.BASE.getQName(), new Cardinality());
      identity.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      identity.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      identity.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      identity.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.IDENTITY.getQName(), identity);
      YangStatementDef base = new YangStatementDef(YangBuiltinKeyword.BASE.getQName(), YangBuiltinKeyword.BASE.getArgument(), YangBuiltinKeyword.BASE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.BASE.getQName(), base);
      YangStatementDef extension = new YangStatementDef(YangBuiltinKeyword.EXTENSION.getQName(), YangBuiltinKeyword.EXTENSION.getArgument(), YangBuiltinKeyword.EXTENSION.isYinElement());
      extension.addSubStatementInfo(YangBuiltinKeyword.ARGUMENT.getQName(), new Cardinality(0, 1));
      extension.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      extension.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      extension.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.EXTENSION.getQName(), extension);
      YangStatementDef argument = new YangStatementDef(YangBuiltinKeyword.ARGUMENT.getQName(), YangBuiltinKeyword.ARGUMENT.getArgument(), YangBuiltinKeyword.ARGUMENT.isYinElement());
      argument.addSubStatementInfo(YangBuiltinKeyword.YINELEMENT.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.ARGUMENT.getQName(), argument);
      YangStatementDef yinElement = new YangStatementDef(YangBuiltinKeyword.YINELEMENT.getQName(), YangBuiltinKeyword.YINELEMENT.getArgument(), YangBuiltinKeyword.YINELEMENT.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.YINELEMENT.getQName(), yinElement);
      YangStatementDef feature = new YangStatementDef(YangBuiltinKeyword.FEATURE.getQName(), YangBuiltinKeyword.FEATURE.getArgument(), YangBuiltinKeyword.FEATURE.isYinElement());
      feature.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      feature.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      feature.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      feature.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.FEATURE.getQName(), feature);
      YangStatementDef ifFeature = new YangStatementDef(YangBuiltinKeyword.IFFEATURE.getQName(), YangBuiltinKeyword.IFFEATURE.getArgument(), YangBuiltinKeyword.IFFEATURE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.IFFEATURE.getQName(), ifFeature);
      YangStatementDef deviation = new YangStatementDef(YangBuiltinKeyword.DEVIATION.getQName(), YangBuiltinKeyword.DEVIATION.getArgument(), YangBuiltinKeyword.DEVIATION.isYinElement());
      deviation.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      deviation.addSubStatementInfo(YangBuiltinKeyword.DEVIATE.getQName(), new Cardinality());
      deviation.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.DEVIATION.getQName(), deviation);
      YangStatementDef deviate = new YangStatementDef(YangBuiltinKeyword.DEVIATE.getQName(), YangBuiltinKeyword.DEVIATE.getArgument(), YangBuiltinKeyword.DEVIATE.isYinElement());
      deviate.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality());
      deviate.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      deviate.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.UNIQUE.getQName(), new Cardinality());
      deviate.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.DEVIATE.getQName(), deviate);
      YangStatementDef config = new YangStatementDef(YangBuiltinKeyword.CONFIG.getQName(), YangBuiltinKeyword.CONFIG.getArgument(), YangBuiltinKeyword.CONFIG.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.CONFIG.getQName(), config);
      YangStatementDef status = new YangStatementDef(YangBuiltinKeyword.STATUS.getQName(), YangBuiltinKeyword.STATUS.getArgument(), YangBuiltinKeyword.STATUS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.STATUS.getQName(), status);
      YangStatementDef description = new YangStatementDef(YangBuiltinKeyword.DESCRIPTION.getQName(), YangBuiltinKeyword.DESCRIPTION.getArgument(), YangBuiltinKeyword.DESCRIPTION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.DESCRIPTION.getQName(), description);
      YangStatementDef reference = new YangStatementDef(YangBuiltinKeyword.REFERENCE.getQName(), YangBuiltinKeyword.REFERENCE.getArgument(), YangBuiltinKeyword.REFERENCE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.REFERENCE.getQName(), reference);
      YangStatementDef when = new YangStatementDef(YangBuiltinKeyword.WHEN.getQName(), YangBuiltinKeyword.WHEN.getArgument(), YangBuiltinKeyword.WHEN.isYinElement());
      when.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      when.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.WHEN.getQName(), when);
      YangStatementDef range = new YangStatementDef(YangBuiltinKeyword.RANGE.getQName(), YangBuiltinKeyword.RANGE.getArgument(), YangBuiltinKeyword.RANGE.isYinElement());
      range.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      range.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      range.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      range.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.RANGE.getQName(), range);
      YangStatementDef fractionDigit = new YangStatementDef(YangBuiltinKeyword.FRACTIONDIGITS.getQName(), YangBuiltinKeyword.FRACTIONDIGITS.getArgument(), YangBuiltinKeyword.FRACTIONDIGITS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.FRACTIONDIGITS.getQName(), fractionDigit);
      YangStatementDef length = new YangStatementDef(YangBuiltinKeyword.LENGTH.getQName(), YangBuiltinKeyword.LENGTH.getArgument(), YangBuiltinKeyword.LENGTH.isYinElement());
      length.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      length.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      length.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      length.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LENGTH.getQName(), length);
      YangStatementDef pattern = new YangStatementDef(YangBuiltinKeyword.PATTERN.getQName(), YangBuiltinKeyword.PATTERN.getArgument(), YangBuiltinKeyword.PATTERN.isYinElement());
      pattern.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      pattern.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      pattern.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      pattern.addSubStatementInfo(YangBuiltinKeyword.MODIFIER.getQName(), new Cardinality(0, 1));
      pattern.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.PATTERN.getQName(), pattern);
      YangStatementDef modifier = new YangStatementDef(YangBuiltinKeyword.MODIFIER.getQName(), YangBuiltinKeyword.MODIFIER.getArgument(), YangBuiltinKeyword.MODIFIER.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.MODIFIER.getQName(), modifier);
      YangStatementDef enumDef = new YangStatementDef(YangBuiltinKeyword.ENUM.getQName(), YangBuiltinKeyword.ENUM.getArgument(), YangBuiltinKeyword.ENUM.isYinElement());
      enumDef.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      enumDef.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      enumDef.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      enumDef.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      enumDef.addSubStatementInfo(YangBuiltinKeyword.VALUE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.ENUM.getQName(), enumDef);
      YangStatementDef value = new YangStatementDef(YangBuiltinKeyword.VALUE.getQName(), YangBuiltinKeyword.VALUE.getArgument(), YangBuiltinKeyword.VALUE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.VALUE.getQName(), value);
      YangStatementDef bit = new YangStatementDef(YangBuiltinKeyword.BIT.getQName(), YangBuiltinKeyword.BIT.getArgument(), YangBuiltinKeyword.BIT.isYinElement());
      bit.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      bit.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      bit.addSubStatementInfo(YangBuiltinKeyword.POSITION.getQName(), new Cardinality(0, 1));
      bit.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      bit.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.BIT.getQName(), bit);
      YangStatementDef position = new YangStatementDef(YangBuiltinKeyword.POSITION.getQName(), YangBuiltinKeyword.POSITION.getArgument(), YangBuiltinKeyword.POSITION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.POSITION.getQName(), position);
      YangStatementDef path = new YangStatementDef(YangBuiltinKeyword.PATH.getQName(), YangBuiltinKeyword.PATH.getArgument(), YangBuiltinKeyword.PATH.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.PATH.getQName(), path);
      YangStatementDef requireInstance = new YangStatementDef(YangBuiltinKeyword.REQUIREINSTANCE.getQName(), YangBuiltinKeyword.REQUIREINSTANCE.getArgument(), YangBuiltinKeyword.REQUIREINSTANCE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.REQUIREINSTANCE.getQName(), requireInstance);
   }

   private void initYang10Statements() {
      YangStatementDef module = new YangStatementDef(YangBuiltinKeyword.MODULE.getQName(), YangBuiltinKeyword.MODULE.getArgument(), YangBuiltinKeyword.MODULE.isYinElement());
      module.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.AUGMENT.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.CONTACT.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.DEVIATION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.EXTENSION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.FEATURE.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.IDENTITY.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.IMPORT.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.INCLUDE.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.NAMESPACE.getQName(), new Cardinality(1, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.ORGANIZATION.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.PREFIX.getQName(), new Cardinality(1, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      module.addSubStatementInfo(YangBuiltinKeyword.REVISION.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.RPC.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      module.addSubStatementInfo(YangBuiltinKeyword.YANGVERSION.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.MODULE.getQName(), module);
      YangStatementDef importDef = new YangStatementDef(YangBuiltinKeyword.IMPORT.getQName(), YangBuiltinKeyword.IMPORT.getArgument(), YangBuiltinKeyword.IMPORT.isYinElement());
      importDef.addSubStatementInfo(YangBuiltinKeyword.PREFIX.getQName(), new Cardinality(1, 1));
      importDef.addSubStatementInfo(YangBuiltinKeyword.REVISIONDATE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.IMPORT.getQName(), importDef);
      YangStatementDef revisionDate = new YangStatementDef(YangBuiltinKeyword.REVISIONDATE.getQName(), YangBuiltinKeyword.REVISIONDATE.getArgument(), YangBuiltinKeyword.REVISIONDATE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.REVISIONDATE.getQName(), revisionDate);
      YangStatementDef yangVersion = new YangStatementDef(YangBuiltinKeyword.YANGVERSION.getQName(), YangBuiltinKeyword.YANGVERSION.getArgument(), YangBuiltinKeyword.YANGVERSION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.YANGVERSION.getQName(), yangVersion);
      YangStatementDef namespace = new YangStatementDef(YangBuiltinKeyword.NAMESPACE.getQName(), YangBuiltinKeyword.NAMESPACE.getArgument(), YangBuiltinKeyword.NAMESPACE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.NAMESPACE.getQName(), namespace);
      YangStatementDef prefix = new YangStatementDef(YangBuiltinKeyword.PREFIX.getQName(), YangBuiltinKeyword.PREFIX.getArgument(), YangBuiltinKeyword.PREFIX.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.PREFIX.getQName(), prefix);
      YangStatementDef include = new YangStatementDef(YangBuiltinKeyword.INCLUDE.getQName(), YangBuiltinKeyword.INCLUDE.getArgument(), YangBuiltinKeyword.INCLUDE.isYinElement());
      include.addSubStatementInfo(YangBuiltinKeyword.REVISIONDATE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.INCLUDE.getQName(), include);
      YangStatementDef organization = new YangStatementDef(YangBuiltinKeyword.ORGANIZATION.getQName(), YangBuiltinKeyword.ORGANIZATION.getArgument(), YangBuiltinKeyword.ORGANIZATION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ORGANIZATION.getQName(), organization);
      YangStatementDef contact = new YangStatementDef(YangBuiltinKeyword.CONTACT.getQName(), YangBuiltinKeyword.CONTACT.getArgument(), YangBuiltinKeyword.CONTACT.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.CONTACT.getQName(), contact);
      YangStatementDef revision = new YangStatementDef(YangBuiltinKeyword.REVISION.getQName(), YangBuiltinKeyword.REVISION.getArgument(), YangBuiltinKeyword.REVISION.isYinElement());
      revision.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      revision.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.REVISION.getQName(), revision);
      YangStatementDef submodule = new YangStatementDef(YangBuiltinKeyword.SUBMODULE.getQName(), YangBuiltinKeyword.SUBMODULE.getArgument(), YangBuiltinKeyword.SUBMODULE.isYinElement());
      submodule.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.AUGMENT.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.BELONGSTO.getQName(), new Cardinality(1, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.CONTACT.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.DEVIATION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.EXTENSION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.FEATURE.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.IDENTITY.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.IMPORT.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.INCLUDE.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.NOTIFICATION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.ORGANIZATION.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      submodule.addSubStatementInfo(YangBuiltinKeyword.REVISION.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.RPC.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      submodule.addSubStatementInfo(YangBuiltinKeyword.YANGVERSION.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.SUBMODULE.getQName(), submodule);
      YangStatementDef belongsTo = new YangStatementDef(YangBuiltinKeyword.BELONGSTO.getQName(), YangBuiltinKeyword.BELONGSTO.getArgument(), YangBuiltinKeyword.BELONGSTO.isYinElement());
      belongsTo.addSubStatementInfo(YangBuiltinKeyword.PREFIX.getQName(), new Cardinality(1, 1));
      this.statementDefs.put(YangBuiltinKeyword.BELONGSTO.getQName(), belongsTo);
      YangStatementDef typedef = new YangStatementDef(YangBuiltinKeyword.TYPEDEF.getQName(), YangBuiltinKeyword.TYPEDEF.getArgument(), YangBuiltinKeyword.TYPEDEF.isYinElement());
      typedef.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(1, 1));
      typedef.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.TYPEDEF.getQName(), typedef);
      YangStatementDef units = new YangStatementDef(YangBuiltinKeyword.UNITS.getQName(), YangBuiltinKeyword.UNITS.getArgument(), YangBuiltinKeyword.UNITS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.UNITS.getQName(), units);
      YangStatementDef defaultDef = new YangStatementDef(YangBuiltinKeyword.DEFAULT.getQName(), YangBuiltinKeyword.DEFAULT.getArgument(), YangBuiltinKeyword.DEFAULT.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.DEFAULT.getQName(), defaultDef);
      YangStatementDef type = new YangStatementDef(YangBuiltinKeyword.TYPE.getQName(), YangBuiltinKeyword.TYPE.getArgument(), YangBuiltinKeyword.TYPE.isYinElement());
      type.addSubStatementInfo(YangBuiltinKeyword.BASE.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.BIT.getQName(), new Cardinality());
      type.addSubStatementInfo(YangBuiltinKeyword.FRACTIONDIGITS.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.ENUM.getQName(), new Cardinality());
      type.addSubStatementInfo(YangBuiltinKeyword.LENGTH.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.PATH.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.PATTERN.getQName(), new Cardinality());
      type.addSubStatementInfo(YangBuiltinKeyword.RANGE.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.REQUIREINSTANCE.getQName(), new Cardinality(0, 1));
      type.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.TYPE.getQName(), type);
      YangStatementDef container = new YangStatementDef(YangBuiltinKeyword.CONTAINER.getQName(), YangBuiltinKeyword.CONTAINER.getArgument(), YangBuiltinKeyword.CONTAINER.isYinElement());
      container.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.PRESENCE.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      container.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      container.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.CONTAINER.getQName(), container);
      YangStatementDef must = new YangStatementDef(YangBuiltinKeyword.MUST.getQName(), YangBuiltinKeyword.MUST.getArgument(), YangBuiltinKeyword.MUST.isYinElement());
      must.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      must.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      must.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      must.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.MUST.getQName(), must);
      YangStatementDef errorAppTag = new YangStatementDef(YangBuiltinKeyword.ERRORAPPTAG.getQName(), YangBuiltinKeyword.ERRORAPPTAG.getArgument(), YangBuiltinKeyword.ERRORAPPTAG.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ERRORAPPTAG.getQName(), errorAppTag);
      YangStatementDef errorMessage = new YangStatementDef(YangBuiltinKeyword.ERRORMESSAGE.getQName(), YangBuiltinKeyword.ERRORMESSAGE.getArgument(), YangBuiltinKeyword.ERRORMESSAGE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ERRORMESSAGE.getQName(), errorMessage);
      YangStatementDef presence = new YangStatementDef(YangBuiltinKeyword.PRESENCE.getQName(), YangBuiltinKeyword.PRESENCE.getArgument(), YangBuiltinKeyword.PRESENCE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.PRESENCE.getQName(), presence);
      YangStatementDef leaf = new YangStatementDef(YangBuiltinKeyword.LEAF.getQName(), YangBuiltinKeyword.LEAF.getArgument(), YangBuiltinKeyword.LEAF.isYinElement());
      leaf.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      leaf.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      leaf.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(1, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      leaf.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LEAF.getQName(), leaf);
      YangStatementDef mandatory = new YangStatementDef(YangBuiltinKeyword.MANDATORY.getQName(), YangBuiltinKeyword.MANDATORY.getArgument(), YangBuiltinKeyword.MANDATORY.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.MANDATORY.getQName(), mandatory);
      YangStatementDef leafList = new YangStatementDef(YangBuiltinKeyword.LEAFLIST.getQName(), YangBuiltinKeyword.LEAFLIST.getArgument(), YangBuiltinKeyword.LEAFLIST.isYinElement());
      leafList.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      leafList.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      leafList.addSubStatementInfo(YangBuiltinKeyword.ORDEREDBY.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(1, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      leafList.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LEAFLIST.getQName(), leafList);
      YangStatementDef minElements = new YangStatementDef(YangBuiltinKeyword.MINELEMENTS.getQName(), YangBuiltinKeyword.MINELEMENTS.getArgument(), YangBuiltinKeyword.MINELEMENTS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.MINELEMENTS.getQName(), minElements);
      YangStatementDef maxElements = new YangStatementDef(YangBuiltinKeyword.MAXELEMENTS.getQName(), YangBuiltinKeyword.MAXELEMENTS.getArgument(), YangBuiltinKeyword.MAXELEMENTS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.MAXELEMENTS.getQName(), maxElements);
      YangStatementDef orderedBy = new YangStatementDef(YangBuiltinKeyword.ORDEREDBY.getQName(), YangBuiltinKeyword.ORDEREDBY.getArgument(), YangBuiltinKeyword.ORDEREDBY.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.ORDEREDBY.getQName(), orderedBy);
      YangStatementDef list = new YangStatementDef(YangBuiltinKeyword.LIST.getQName(), YangBuiltinKeyword.LIST.getArgument(), YangBuiltinKeyword.LIST.isYinElement());
      list.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.KEY.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.ORDEREDBY.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      list.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.UNIQUE.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      list.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LIST.getQName(), list);
      YangStatementDef key = new YangStatementDef(YangBuiltinKeyword.KEY.getQName(), YangBuiltinKeyword.KEY.getArgument(), YangBuiltinKeyword.KEY.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.KEY.getQName(), key);
      YangStatementDef unique = new YangStatementDef(YangBuiltinKeyword.UNIQUE.getQName(), YangBuiltinKeyword.UNIQUE.getArgument(), YangBuiltinKeyword.UNIQUE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.UNIQUE.getQName(), unique);
      YangStatementDef choice = new YangStatementDef(YangBuiltinKeyword.CHOICE.getQName(), YangBuiltinKeyword.CHOICE.getArgument(), YangBuiltinKeyword.CHOICE.isYinElement());
      choice.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.CASE.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      choice.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      choice.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.CHOICE.getQName(), choice);
      YangStatementDef caseDef = new YangStatementDef(YangBuiltinKeyword.CASE.getQName(), YangBuiltinKeyword.CASE.getArgument(), YangBuiltinKeyword.CASE.isYinElement());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      caseDef.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      caseDef.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      caseDef.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      caseDef.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.CASE.getQName(), caseDef);
      YangStatementDef anyxml = new YangStatementDef(YangBuiltinKeyword.ANYXML.getQName(), YangBuiltinKeyword.ANYXML.getArgument(), YangBuiltinKeyword.ANYXML.isYinElement());
      anyxml.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      anyxml.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      anyxml.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      anyxml.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.ANYXML.getQName(), anyxml);
      YangStatementDef grouping = new YangStatementDef(YangBuiltinKeyword.GROUPING.getQName(), YangBuiltinKeyword.GROUPING.getArgument(), YangBuiltinKeyword.GROUPING.isYinElement());
      grouping.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      grouping.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      grouping.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      grouping.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      grouping.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.GROUPING.getQName(), grouping);
      YangStatementDef uses = new YangStatementDef(YangBuiltinKeyword.USES.getQName(), YangBuiltinKeyword.USES.getArgument(), YangBuiltinKeyword.USES.isYinElement());
      uses.addSubStatementInfo(YangBuiltinKeyword.AUGMENT.getQName(), new Cardinality());
      uses.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      uses.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      uses.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      uses.addSubStatementInfo(YangBuiltinKeyword.REFINE.getQName(), new Cardinality());
      uses.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      uses.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.USES.getQName(), uses);
      YangStatementDef refine = new YangStatementDef(YangBuiltinKeyword.REFINE.getQName(), YangBuiltinKeyword.REFINE.getArgument(), YangBuiltinKeyword.REFINE.isYinElement());
      refine.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.PRESENCE.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      refine.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      refine.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.REFINE.getQName(), refine);
      YangStatementDef rpc = new YangStatementDef(YangBuiltinKeyword.RPC.getQName(), YangBuiltinKeyword.RPC.getArgument(), YangBuiltinKeyword.RPC.isYinElement());
      rpc.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      rpc.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      rpc.addSubStatementInfo(YangBuiltinKeyword.INPUT.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.OUTPUT.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      rpc.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.RPC.getQName(), rpc);
      YangStatementDef input = new YangStatementDef(YangBuiltinKeyword.INPUT.getQName(), YangBuiltinKeyword.INPUT.getArgument(), YangBuiltinKeyword.INPUT.isYinElement());
      input.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      input.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.INPUT.getQName(), input);
      YangStatementDef output = new YangStatementDef(YangBuiltinKeyword.OUTPUT.getQName(), YangBuiltinKeyword.OUTPUT.getArgument(), YangBuiltinKeyword.OUTPUT.isYinElement());
      output.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      output.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.OUTPUT.getQName(), output);
      YangStatementDef notification = new YangStatementDef(YangBuiltinKeyword.NOTIFICATION.getQName(), YangBuiltinKeyword.NOTIFICATION.getArgument(), YangBuiltinKeyword.NOTIFICATION.isYinElement());
      notification.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      notification.addSubStatementInfo(YangBuiltinKeyword.GROUPING.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      notification.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      notification.addSubStatementInfo(YangBuiltinKeyword.TYPEDEF.getQName(), new Cardinality());
      notification.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      this.statementDefs.put(YangBuiltinKeyword.NOTIFICATION.getQName(), notification);
      YangStatementDef augment = new YangStatementDef(YangBuiltinKeyword.AUGMENT.getQName(), YangBuiltinKeyword.AUGMENT.getArgument(), YangBuiltinKeyword.AUGMENT.isYinElement());
      augment.addSubStatementInfo(YangBuiltinKeyword.ANYXML.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.CASE.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.CHOICE.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.CONTAINER.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      augment.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.LEAF.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.LEAFLIST.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.LIST.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      augment.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      augment.addSubStatementInfo(YangBuiltinKeyword.USES.getQName(), new Cardinality());
      augment.addSubStatementInfo(YangBuiltinKeyword.WHEN.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.AUGMENT.getQName(), augment);
      YangStatementDef identity = new YangStatementDef(YangBuiltinKeyword.IDENTITY.getQName(), YangBuiltinKeyword.IDENTITY.getArgument(), YangBuiltinKeyword.IDENTITY.isYinElement());
      identity.addSubStatementInfo(YangBuiltinKeyword.BASE.getQName(), new Cardinality());
      identity.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      identity.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      identity.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.IDENTITY.getQName(), identity);
      YangStatementDef base = new YangStatementDef(YangBuiltinKeyword.BASE.getQName(), YangBuiltinKeyword.BASE.getArgument(), YangBuiltinKeyword.BASE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.BASE.getQName(), base);
      YangStatementDef extension = new YangStatementDef(YangBuiltinKeyword.EXTENSION.getQName(), YangBuiltinKeyword.EXTENSION.getArgument(), YangBuiltinKeyword.EXTENSION.isYinElement());
      extension.addSubStatementInfo(YangBuiltinKeyword.ARGUMENT.getQName(), new Cardinality(0, 1));
      extension.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      extension.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      extension.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.EXTENSION.getQName(), extension);
      YangStatementDef argument = new YangStatementDef(YangBuiltinKeyword.ARGUMENT.getQName(), YangBuiltinKeyword.ARGUMENT.getArgument(), YangBuiltinKeyword.ARGUMENT.isYinElement());
      argument.addSubStatementInfo(YangBuiltinKeyword.YINELEMENT.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.ARGUMENT.getQName(), argument);
      YangStatementDef yinElement = new YangStatementDef(YangBuiltinKeyword.YINELEMENT.getQName(), YangBuiltinKeyword.YINELEMENT.getArgument(), YangBuiltinKeyword.YINELEMENT.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.YINELEMENT.getQName(), yinElement);
      YangStatementDef feature = new YangStatementDef(YangBuiltinKeyword.FEATURE.getQName(), YangBuiltinKeyword.FEATURE.getArgument(), YangBuiltinKeyword.FEATURE.isYinElement());
      feature.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      feature.addSubStatementInfo(YangBuiltinKeyword.IFFEATURE.getQName(), new Cardinality());
      feature.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      feature.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.FEATURE.getQName(), feature);
      YangStatementDef ifFeature = new YangStatementDef(YangBuiltinKeyword.IFFEATURE.getQName(), YangBuiltinKeyword.IFFEATURE.getArgument(), YangBuiltinKeyword.IFFEATURE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.IFFEATURE.getQName(), ifFeature);
      YangStatementDef deviation = new YangStatementDef(YangBuiltinKeyword.DEVIATION.getQName(), YangBuiltinKeyword.DEVIATION.getArgument(), YangBuiltinKeyword.DEVIATION.isYinElement());
      deviation.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      deviation.addSubStatementInfo(YangBuiltinKeyword.DEVIATE.getQName(), new Cardinality());
      deviation.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.DEVIATION.getQName(), deviation);
      YangStatementDef deviate = new YangStatementDef(YangBuiltinKeyword.DEVIATE.getQName(), YangBuiltinKeyword.DEVIATE.getArgument(), YangBuiltinKeyword.DEVIATE.isYinElement());
      deviate.addSubStatementInfo(YangBuiltinKeyword.CONFIG.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.DEFAULT.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.MANDATORY.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.MAXELEMENTS.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.MINELEMENTS.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.MUST.getQName(), new Cardinality());
      deviate.addSubStatementInfo(YangBuiltinKeyword.TYPE.getQName(), new Cardinality(0, 1));
      deviate.addSubStatementInfo(YangBuiltinKeyword.UNIQUE.getQName(), new Cardinality());
      deviate.addSubStatementInfo(YangBuiltinKeyword.UNITS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.DEVIATE.getQName(), deviate);
      YangStatementDef config = new YangStatementDef(YangBuiltinKeyword.CONFIG.getQName(), YangBuiltinKeyword.CONFIG.getArgument(), YangBuiltinKeyword.CONFIG.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.CONFIG.getQName(), config);
      YangStatementDef status = new YangStatementDef(YangBuiltinKeyword.STATUS.getQName(), YangBuiltinKeyword.STATUS.getArgument(), YangBuiltinKeyword.STATUS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.STATUS.getQName(), status);
      YangStatementDef description = new YangStatementDef(YangBuiltinKeyword.DESCRIPTION.getQName(), YangBuiltinKeyword.DESCRIPTION.getArgument(), YangBuiltinKeyword.DESCRIPTION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.DESCRIPTION.getQName(), description);
      YangStatementDef reference = new YangStatementDef(YangBuiltinKeyword.REFERENCE.getQName(), YangBuiltinKeyword.REFERENCE.getArgument(), YangBuiltinKeyword.REFERENCE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.REFERENCE.getQName(), reference);
      YangStatementDef when = new YangStatementDef(YangBuiltinKeyword.WHEN.getQName(), YangBuiltinKeyword.WHEN.getArgument(), YangBuiltinKeyword.WHEN.isYinElement());
      when.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      when.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.WHEN.getQName(), when);
      YangStatementDef range = new YangStatementDef(YangBuiltinKeyword.RANGE.getQName(), YangBuiltinKeyword.RANGE.getArgument(), YangBuiltinKeyword.RANGE.isYinElement());
      range.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      range.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      range.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      range.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.RANGE.getQName(), range);
      YangStatementDef fractionDigit = new YangStatementDef(YangBuiltinKeyword.FRACTIONDIGITS.getQName(), YangBuiltinKeyword.FRACTIONDIGITS.getArgument(), YangBuiltinKeyword.FRACTIONDIGITS.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.FRACTIONDIGITS.getQName(), fractionDigit);
      YangStatementDef length = new YangStatementDef(YangBuiltinKeyword.LENGTH.getQName(), YangBuiltinKeyword.LENGTH.getArgument(), YangBuiltinKeyword.LENGTH.isYinElement());
      length.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      length.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      length.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      length.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.LENGTH.getQName(), length);
      YangStatementDef pattern = new YangStatementDef(YangBuiltinKeyword.PATTERN.getQName(), YangBuiltinKeyword.PATTERN.getArgument(), YangBuiltinKeyword.PATTERN.isYinElement());
      pattern.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      pattern.addSubStatementInfo(YangBuiltinKeyword.ERRORAPPTAG.getQName(), new Cardinality(0, 1));
      pattern.addSubStatementInfo(YangBuiltinKeyword.ERRORMESSAGE.getQName(), new Cardinality(0, 1));
      pattern.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.PATTERN.getQName(), pattern);
      YangStatementDef enumDef = new YangStatementDef(YangBuiltinKeyword.ENUM.getQName(), YangBuiltinKeyword.ENUM.getArgument(), YangBuiltinKeyword.ENUM.isYinElement());
      enumDef.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      enumDef.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      enumDef.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      enumDef.addSubStatementInfo(YangBuiltinKeyword.VALUE.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.ENUM.getQName(), enumDef);
      YangStatementDef value = new YangStatementDef(YangBuiltinKeyword.VALUE.getQName(), YangBuiltinKeyword.VALUE.getArgument(), YangBuiltinKeyword.VALUE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.VALUE.getQName(), value);
      YangStatementDef bit = new YangStatementDef(YangBuiltinKeyword.BIT.getQName(), YangBuiltinKeyword.BIT.getArgument(), YangBuiltinKeyword.BIT.isYinElement());
      bit.addSubStatementInfo(YangBuiltinKeyword.DESCRIPTION.getQName(), new Cardinality(0, 1));
      bit.addSubStatementInfo(YangBuiltinKeyword.POSITION.getQName(), new Cardinality(0, 1));
      bit.addSubStatementInfo(YangBuiltinKeyword.REFERENCE.getQName(), new Cardinality(0, 1));
      bit.addSubStatementInfo(YangBuiltinKeyword.STATUS.getQName(), new Cardinality(0, 1));
      this.statementDefs.put(YangBuiltinKeyword.BIT.getQName(), bit);
      YangStatementDef position = new YangStatementDef(YangBuiltinKeyword.POSITION.getQName(), YangBuiltinKeyword.POSITION.getArgument(), YangBuiltinKeyword.POSITION.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.POSITION.getQName(), position);
      YangStatementDef path = new YangStatementDef(YangBuiltinKeyword.PATH.getQName(), YangBuiltinKeyword.PATH.getArgument(), YangBuiltinKeyword.PATH.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.PATH.getQName(), path);
      YangStatementDef requireInstance = new YangStatementDef(YangBuiltinKeyword.REQUIREINSTANCE.getQName(), YangBuiltinKeyword.REQUIREINSTANCE.getArgument(), YangBuiltinKeyword.REQUIREINSTANCE.isYinElement());
      this.statementDefs.put(YangBuiltinKeyword.REQUIREINSTANCE.getQName(), requireInstance);
   }
}
